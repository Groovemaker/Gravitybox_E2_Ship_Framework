@name Gravitybox - An user friendly ship framework

# Landing Pad
@model models/props_phx/construct/metal_plate4x4.mdl

# Main

@persist [NUM_ EngineIDRange Engine_MaxCount HasWeapons Chair_MaxCount ChassisID CurID EnginePowerSum LateralCapabilities Cooldown2 Weapon_FireRate2 Iter]
@persist [CanTrack MissileSpeed TrackingRadius ChassisWeight Tracking EngineSizGlobal Cooldown ShipArmor Weapon_FireRate ThrottlePower] 
@persist [ARR_ Engines Weapons Chairs Chair_Sockets Weapon_Sockets Engine_Sockets Engine_Glows Engine_Flames JetLength EngineSizMultis]:array
@persist [STR_ EngineSound]:string
@persist [VEC_ Chair1Pos Chair2Pos FirePos TaPos]:vector
@persist [ENT_ Chair1 Chair2 Baseplate Missile TrackingEnt Evadee Evader]:entity

# Flight

@persist [Throttle IsOn Rollpower Roll HasDriver]
@persist [Driver]:entity

#[
    ~[ Gravitybox Spaceship Building Framework ]~
    --------------------------------------------------------------------------------------------
    -[ 17.01.2022 ]-
    -[ 07:15 ]-
    --------------------------------------------------------------------------------------------
    Hi! I'm Runic.
    This is the Gravitybox Ship Framework.
    You can slot together any engines, chassis and weapons by #including them down there!
    You are also encouraged to modify the original modules.
    
]#

# First
if(first() || duped()){
    # Do not change
    Throttle = 0
    Iter = 1
    Cooldown = 1
    Cooldown2 = 1
    
    # Holo ID Ranges, dont change.
    ChassisIDRange = 400
    EngineIDRange = 200
    
    # COMPATIBILITY: This does NOT change the skin, merely inits it.
    Skin = vec(0)
    
    # Include Chassis Here!
    #include "chassis_z95"
    
    # Include Engines Here!
    #include "engine_headhunter"
    #include "engine_headhunter"
    
    # Include Weapons Here!
    #include "weapon_asura"
    
    # Don't spawn more engines than the chassis can handle to avoid bugs
    if(Engines:count() > Engine_MaxCount){
        error("Too Many Engines for chassis! Maximum on this one: "+Engine_MaxCount)
    }

    # Baseplate
    Baseplate = propSpawn("models/props_phx/construct/wood/wood_curve360x1.mdl",ang(0,0,0),1)
    Baseplate:setHealth(ShipArmor)
    Baseplate:setAlpha(0)
    Baseplate:setPos(entity():pos())
    
    # Setup Engines onto Chassis
    foreach(K,V:number = Engine_Sockets){
        holoPos(Engines[K,number],holoEntity(V):pos())
        holoParent(Engines[K,number],ChassisID)
    }
    
    # Parent to Baseplate with offset
    holoPos(ChassisID,Baseplate:toWorld(vec(0,0,25)))
    holoAng(ChassisID,Baseplate:toWorld(ang(0,0,0)))
    holoParent(ChassisID,Baseplate)
    
    # Chairs
    Chair1 = seatSpawn("",1)
    Chair1:setPos(holoEntity(Chair_Sockets[1,number]):pos())
    Chair1:setAng(holoEntity(Chair_Sockets[1,number]):angles())
    Chair1:setMass(0.001)
    Chair1:setNoCollideAll(1)
    
    if(Chair_MaxCount > 1){
        Chair2 = seatSpawn("",1)
        Chair2:setPos(holoEntity(Chair_Sockets[2,number]):pos())
        Chair2:setAng(holoEntity(Chair_Sockets[2,number]):angles())
        Chair2:setMass(0.001)  
        Chair2:setNoCollideAll(1)
    }
    
    # Weld Chairs to Baseplate
    weld(Chair1,Baseplate)
    weld(Chair2,Baseplate)
        
    # Baseplate setup
    Baseplate:propGravity(0)
    Baseplate:setMass(17777)
    foreach(K,V:number = Engine_Flames){
        holoScale(V,vec(Throttle,Throttle,JetLength[K,number]+Throttle) * EngineSizMultis[K,number])
    }
    holoEntity(ChassisID):soundPlay(1,0,EngineSound)
    soundPitch(1,0)
    
    # MAIN Loop
    timer("main",1)
    
    # SLOW Loop
    timer("slow",1)
    
    # Tracking System
    timer("trackingsys",1)
    
    Chair1:propFreeze(0)
    Chair2:propFreeze(0)
    
    # Aim reticle
    holoCreate(123)
    holoModel(123,"hq_sphere")
    holoScale(123,vec(0.6))
    holoMaterial(123,"hlmv/debugmrmwireframe")
    holoColor(123,vec(100,255,133))
}

# Clks
## Main Loop
if(clk("main")){
    if(perf()){
        
        if(changed(Chair1:driver())){
            if(Chair1:driver():isPlayer()){
                Baseplate:propFreeze(0)
                Driver = Chair1:driver()
                HasDriver = 1
                holoAlpha(123,254)
            }else{
                HasDriver = 0
                Throttle = 0
                foreach(K,V:number = Engine_Flames){
                    holoScale(V,vec(0) * EngineSizMultis[K,number])
                }
                holoAlpha(123,0)
            }
        }
        
        if(HasDriver == 1){
            
            # Set up Aim position
            rangerFilter(array(Baseplate,Chair1,Chair2,Driver))
            AimPos = rangerOffset(16384, Driver:shootPos(), Driver:eye()):position()
            
            # Weapons
            if(Driver:keyAttack1()){
                if(Cooldown == 1){
                    FirePos = holoEntity(123):pos()
                    Cooldown = 0
                    if(HasWeapons == 1){weapon_fire(777,holoEntity(Weapon_Sockets[1,number]),holoEntity(Weapon_Sockets[1,number]):pos(),FirePos)}
                    local Line = "de-alpha;"+777
                    timer(Line,(1000/Weapon_FireRate)/2)
                    timer("cooldown",1000/Weapon_FireRate)
                }
            }
            
            # Missile Evasion
            if(Driver:keyAttack2()){
                if(Cooldown2 == 1){
                    FirePos = holoEntity(123):pos()
                    Cooldown2 = 0
                    if(HasWeapons == 1){secondary(777,holoEntity(Weapon_Sockets[1,number]),holoEntity(Weapon_Sockets[1,number]):pos(),holoEntity(Weapon_Sockets[2,number]):pos(),FirePos)}
                    local Line = "de-alpha;"+777
                    timer(Line,(1000/Weapon_FireRate2)/2)
                    timer("cooldown2",1000/Weapon_FireRate2)
                }
            }
            
            # Rolling
            if(Driver:keyLeft()){
                Baseplate:applyAngForce( ang(0,0,-Rollpower) * (Baseplate:mass()) * 11)     
            }elseif(Driver:keyRight()){
                Baseplate:applyAngForce( ang(0,0,Rollpower) * (Baseplate:mass()) * 11)  
            }
            
            
            if(Driver:keyForward()){                                    # Throttle Up
                if(Throttle < 0.066){
                    Throttle = Throttle + (ThrottlePower / 1000) / ChassisWeight
                }
            }elseif(Driver:keyBack()){                                 # Throttle Down
                if(Throttle > -0.066){
                    Throttle = Throttle - (ThrottlePower / 1000) / ChassisWeight
                    if(Throttle < 0){
                        foreach(K,V:number = Engine_Flames){
                            holoScale(V,vec(0))
                        }
                    }
                }
            }
            
            # Scaling
            if(Throttle != 0){
                if(!Driver:keyBack() && !Driver:keyForward()){
                    if(Throttle > 0){
                        Throttle = Throttle - (ThrottlePower / 1000) / ChassisWeight
                    }elseif(Throttle < 0){
                        Throttle = Throttle + (ThrottlePower / 1000) / ChassisWeight
                        foreach(K,V:number = Engine_Flames){
                            holoScale(V,vec(0))
                        }
                    }
                }
            }
            
            # Aim
            R = (Rollpower * Baseplate:mass())/100
            TargAng = -ang(Baseplate:elevation(AimPos),Baseplate:bearing(AimPos),0)   
            
            # Velocity Dampener and Moving
            Baseplate:applyAngForce(TargAng * ((Baseplate:mass()) * 4) / ChassisWeight)
            Baseplate:applyAngForce(-(Baseplate:angVel()) * (Baseplate:mass()) * 2)
            Baseplate:applyForce((Baseplate:forward()*((Throttle*EnginePowerSum)*1.25))*Baseplate:mass())
            Baseplate:applyForce((Baseplate:up()*((Driver:keyJump() - Driver:keySprint())*(LateralCapabilities / 50)))*Baseplate:mass())
            
            # Aim Reticle
            holoPos(123,AimPos)
            holoScale(123,vec(0.75)+Driver:pos():distance(AimPos)*0.0005)   
        }
        
        # Pitch sound
        soundPitch(1,105+(Throttle*255))   
        
        # Utility Missiles
        # If one is valid...
        if(Missile:isValidPhysics() || Evader:isValidPhysics()){
            # If we found a target...
            if(Tracking == 1){
                # and we can track at all...
                if(CanTrack == 1){
                    # Aim Towards Target
                    EntPos = TrackingEnt:pos()
                    Missile:applyAngForce( -ang(Missile:elevation(EntPos),Missile:bearing(EntPos),0) * ((Missile:mass()) * 300) / 1)
                }
            }
            
            # Fly towards target
            Missile:applyAngForce(-(Missile:angVel()) * (Missile:mass()) * 1)
            Missile:applyForce((Missile:forward() * Missile:mass())* 500)
            
            # Missile Evasion
            if(Evadee:isValid() && Evader:isValidPhysics()){
                Evader:applyAngForce( -ang(Evader:elevation(Evadee:pos()),Evader:bearing(Evadee:pos()),0) * ((Evader:mass()) * 350) / 1)
                Evader:applyAngForce(-(Evader:angVel()) * (Evader:mass()) * 1)
                Evader:applyForce((Evader:forward() * Evader:mass())* 300)
            }
        }
    }
    
    # Re-loop
    timer("main",10)
}

## Remove Beams after firing
if(clkName():find("de-alpha")){
        local Parse = clkName():explode(";")[2,string]:toNumber()
        holoAlpha(Parse,0)
        holoAlpha(Parse+1,0)
        holoAlpha(Parse+2,0)
        holoAlpha(Parse+3,0)
}

## Cooldowns
if(clk("cooldown")){
    Cooldown = 1
}
if(clk("cooldown2")){
    Cooldown2 = 1
}

## Missile tracker enable
if(clk("tracker")){
    CanTrack = 1
}

## SLOW Loop
if(clk("slow")){
    if(perf()){
        
        # Velocity Dampener
        if(HasDriver == 1){
            Baseplate:applyForce((-Baseplate:vel() / 3)*Baseplate:mass())
        }else{
            Baseplate:applyForce((-Baseplate:vel() / 5)*Baseplate:mass())
        }
        
        # Engine Flames
        for(I=1,Engine_Flames:count()){
            holoAng(Engine_Flames[I,number],holoEntity(Engine_Flames[I,number]):toWorld(ang(0,300,0)))
        }
        
        # Make sure others dont see your aimball
        holoVisible(123,players(),0)
        holoVisible(123,Driver,1)
        
        # Scale them according to throttle
        foreach(K,V:number = Engine_Flames){
            holoScale(V,vec(Throttle,Throttle,JetLength[K,number]) * EngineSizMultis[K,number])
        }
        
        #print(ops())
    }
    timer("slow",150)
}

## Tracking System
if(clk("trackingsys")){
    if(perf()){
        
        # If missile is valid
        if(Missile:isValidPhysics()){
            # and we are not yet tracking
            if(Tracking == 0){
                # scan for targets
                findClearWhiteList()
                findClearWhiteModelList()
                findIncludeEntities(players())
                findIncludeClass("prop_vehicle*")
                findExcludePlayer(Driver)
                findExcludePlayer(Chair2:driver())
                findExcludeClass("media*")
                findExcludePlayerProps(owner())
                findInSphere(Missile:pos(),TrackingRadius)
                
                # put them into an array
                local XEnts = findToArray()
                
                # if its not empty...
                if(XEnts[1,entity]:isValid()){
                    
                    # we found something, enable tracking
                    Tracking = 1
                    TrackingEnt=XEnts[1,entity]
                    
                    # weed out the nearest one
                    for(I=1,XEnts:count()){
                        if(XEnts[I,entity]:pos():distance(Missile:pos())<TrackingEnt:pos():distance(Missile:pos())){TrackingEnt=XEnts[I,entity]}
                    }
                    
                    # play confirmation sound
                    holoEntity(Weapon_Sockets[1,number]):soundPlay(4,0,"npc/scanner/combat_scan1.wav")
                    soundPitch(4,randint(95,105))
                }
            }
        }
        
    }
    timer("trackingsys",250)
}

